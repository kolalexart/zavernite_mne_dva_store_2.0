import logging
import typing

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, ContentType
from asyncpg import UniqueViolationError

from tgbot.handlers.admins.admins_secondary import reject_content_type, get_items_categories, \
    get_items_subcategories, get_data_from_state, admin_filters, get_chosen_category_code, \
    check_on_without_subcategory, full_gproduct_description, choose_category_code_number, \
    choose_subcategory_code_number, ExceededMaxProductSubCategoryQuantity, ExceededMaxProductCategoryQuantity, \
    choose_default_item_id, ExceededMaxProductsQuantity, check_on_items_limits_in_category, \
    check_on_categories_limits, check_on_subcategories_limits, check_on_items_limits_in_subcategory, \
    on_process_upload_photo
from tgbot.keyboards.menu_keyboards.admins_keybords.admins_menu import choose_item_id_markup, \
    choose_item_category_name_markup, choose_item_subcategory_name_markup, \
    cancel_markup, yes_no_reply_markup, item_short_description_markup, admins_menu_markup
from tgbot.middlewares.album import album_latency
from tgbot.misc.secondary_functions import get_db, get_item_data, ItemPatterns
from tgbot.misc.states import AddItem, AdminActions
from tgbot.services.integrations.telegraph.service import TelegraphService

logger = logging.getLogger(__name__)


async def choose_item_id(message: Message, state: FSMContext):
    list_items_ids = (await get_data_from_state(state, 'list_items_ids'))[0]
    items_ids_str = ', '.join(list(map(str, list_items_ids)))
    list_categories = await get_items_categories(message)
    if message.content_type == ContentType.TEXT:
        if list_items_ids:
            error_text = f'üî¥ –í—ã –≤–≤–µ–ª–∏: {message.text}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –æ—Ç 1 –¥–æ 9999 ' \
                         f'–æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö: {items_ids_str}. –õ–∏–±–æ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é"'
        else:
            error_text = f'üî¥ –í—ã –≤–≤–µ–ª–∏: {message.text}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –æ—Ç 1 –¥–æ 9999. ' \
                         f'–õ–∏–±–æ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é"'
        pattern = ItemPatterns.ITEM_ID
        if pattern.match(message.text):
            item_id = int(message.text)
            if item_id in list_items_ids:
                await message.answer(error_text, reply_markup=choose_item_id_markup())
            else:
                if list_categories:
                    await message.answer(f'üü¢ –í–∞—à –æ—Ç–≤–µ—Ç ID: <b>{item_id}</b> –ø—Ä–∏–Ω—è—Ç.\n\n'
                                         f'<b>–®–ê–ì_2:</b> –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:',
                                         reply_markup=choose_item_category_name_markup(list_categories))
                    await state.update_data(item_id=item_id, list_categories=list_categories)
                    await AddItem.next()
                else:
                    await message.answer(f'üü¢ –í–∞—à –æ—Ç–≤–µ—Ç ID: <b>{item_id}</b> –ø—Ä–∏–Ω—è—Ç.\n\n'
                                         f'<b>–®–ê–ì_2:</b> –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ '
                                         f'–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –õ–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é',
                                         reply_markup=choose_item_category_name_markup(list_categories))
                    await AddItem.next()
        elif message.text.lower() == '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é':
            try:
                item_id = choose_default_item_id(list_items_ids)
            except ExceededMaxProductsQuantity as err:
                await message.answer('üî¥' + ' ' + err.args[0])
                await state.finish()
            else:
                if list_categories:
                    text = f'üü¢ –í–∞—à –æ—Ç–≤–µ—Ç - –æ—Å—Ç–∞–≤–∏—Ç—å ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—Ä–∏–Ω—è—Ç. –¢–æ–≤–∞—Ä—É –ø—Ä–∏—Å–≤–æ–µ–Ω ID '\
                           f'<b>{item_id}</b>\n\n'\
                           f'<b>–®–ê–ì_2:</b> –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:'
                else:
                    text = f'üü¢ –í–∞—à –æ—Ç–≤–µ—Ç - –æ—Å—Ç–∞–≤–∏—Ç—å ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—Ä–∏–Ω—è—Ç. –¢–æ–≤–∞—Ä—É –ø—Ä–∏—Å–≤–æ–µ–Ω ID ' \
                           f'<b>{item_id}</b>\n\n' \
                           f'<b>–®–ê–ì_2:</b> –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ '\
                           f'–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –õ–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:'
                await message.answer(text, reply_markup=choose_item_category_name_markup(list_categories))
                await state.update_data(item_id=item_id, list_categories=list_categories)
                await AddItem.next()
        else:
            await message.answer(error_text, reply_markup=choose_item_id_markup())
    else:
        additional_text = f'üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –æ—Ç 1 –¥–æ 9999 –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç ' \
                          f"—É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö: {items_ids_str}. "
        await reject_content_type(message, additional_text, choose_item_id_markup())


async def choose_item_category_name(message: Message, state: FSMContext):
    list_categories = (await get_data_from_state(state, 'list_categories'))[0]
    if message.content_type == ContentType.TEXT:
        pattern = ItemPatterns.ITEM_CATEGORY_NAME
        if pattern.match(message.text):
            item_category_name = message.text
            if list_categories:
                list_categories_names = [category[0].lower() for category in list_categories]
                if item_category_name.lower() in list_categories_names:
                    item_category_code = get_chosen_category_code(item_category_name, list_categories)
                    list_subcategories = await get_items_subcategories(message, item_category_code)
                    if list_subcategories and check_on_without_subcategory(list_subcategories):
                        if await check_on_items_limits_in_category(message, item_category_code):
                            await message.answer(f'üü¢ –í—ã –≤—ã–±—Ä–∞–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: '
                                                 f'<b>{item_category_name}</b>. –ö–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: '
                                                 f'<i>{item_category_code}</i>. –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç '
                                                 f'–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —É–∂–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã. –í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, '
                                                 f'–ø–æ—ç—Ç–æ–º—É –≤—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç–µ—Å—å –Ω–∞ —à–∞–≥ <b>–®–ê–ì_4</b>.\n\n'
                                                 f'<b>–®–ê–ì_4:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:',
                                                 reply_markup=cancel_markup())
                            await state.update_data(item_category_name=item_category_name,
                                                    item_category_code=item_category_code)
                            await AddItem.item_name.set()
                        else:
                            await message.answer(f'üî¥ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{item_category_name}</b> –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 98 '
                                                 f'—Ç–æ–≤–∞—Ä–æ–≤. –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä–æ–≤. '
                                                 f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é /admins_menu')
                            await state.finish()
                    else:
                        await message.answer(f'üü¢ –í—ã –≤—ã–±—Ä–∞–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: <b>{item_category_name}</b>. '
                                             f'–ö–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <i>{item_category_code}</i>. –í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.\n\n'
                                             f'<b>–®–ê–ì_3:</b> –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:',
                                             reply_markup=choose_item_subcategory_name_markup(list_subcategories))
                        await state.update_data(item_category_name=item_category_name,
                                                item_category_code=item_category_code,
                                                list_subcategories=list_subcategories)
                        await AddItem.next()
                else:
                    if await check_on_categories_limits(message):
                        try:
                            item_category_code = choose_category_code_number(list_categories)
                        except ExceededMaxProductCategoryQuantity as err:
                            await message.answer('üî¥' + ' ' + err.args[0], reply_markup=ReplyKeyboardRemove())
                            await state.finish()
                        else:
                            await message.answer(f'üü¢ –í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: <b>{item_category_name}</b>. '
                                                 f'–ù–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω –∫–æ–¥ {item_category_code}. –í–∞—à –æ—Ç–≤–µ—Ç '
                                                 f'–ø—Ä–∏–Ω—è—Ç.\n\n'
                                                 f'<b>–®–ê–ì_3:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ –ª–∏–±–æ '
                                                 f'–≤—ã–±–µ—Ä–∏—Ç–µ "–ë–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏":',
                                                 reply_markup=choose_item_subcategory_name_markup(
                                                     without_subcategory_btn=True))
                            await state.update_data(item_category_name=item_category_name,
                                                    item_category_code=item_category_code)
                            await AddItem.next()
                    else:
                        await message.answer(f'üî¥ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π 97. –ë–æ–ª—å—à–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π '
                                             f'—Å–æ–∑–¥–∞—Ç—å –Ω–µ–ª—å–∑—è')
                        await state.finish()
            else:
                item_category_code = choose_category_code_number(list_categories)
                await message.answer(f'üü¢ –í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: <b>{item_category_name}</b>. '
                                     f'–ù–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω –∫–æ–¥ {item_category_code}. –í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.\n\n'
                                     f'<b>–®–ê–ì_3:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ '
                                     f'"–ë–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏":',
                                     reply_markup=choose_item_subcategory_name_markup(
                                         without_subcategory_btn=True))
                await state.update_data(item_category_name=item_category_name,
                                        item_category_code=item_category_code)
                await AddItem.next()
        else:
            if list_categories:
                text = f'üî¥ –í—ã –≤–≤–µ–ª–∏: {message.text} –∏ –≤ –Ω–µ–º {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, ' \
                       f'–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –Ω–µ –±–æ–ª–µ–µ, —á–µ–º 30-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ' \
                       f'–∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ:'
                await message.answer(text, reply_markup=choose_item_category_name_markup(list_categories))
            else:
                text = f'üî¥ –í—ã –≤–≤–µ–ª–∏: {message.text} –∏ –≤ –Ω–µ–º {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, ' \
                       f'–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –Ω–µ –±–æ–ª–µ–µ, —á–µ–º 30-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤:'
                await message.answer(text, reply_markup=choose_item_category_name_markup(list_categories))
    else:
        if list_categories:
            additional_text = f'üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –Ω–µ –±–æ–ª–µ–µ, ' \
                              f'—á–µ–º 30-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ:'
            await reject_content_type(message, additional_text, choose_item_category_name_markup(list_categories))
        else:
            additional_text = f'üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –Ω–µ –±–æ–ª–µ–µ, ' \
                              f'—á–µ–º 30-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤:'
            await reject_content_type(message, additional_text, choose_item_category_name_markup())


async def choose_item_subcategory_name(message: Message, state: FSMContext):
    list_subcategories, item_category_code = await get_data_from_state(state, 'list_subcategories',
                                                                       'item_category_code')
    if message.content_type == ContentType.TEXT:
        pattern = ItemPatterns.ITEM_SUBCATEGORY_NAME
        if pattern.match(message.text):
            item_subcategory_name = message.text
            if list_subcategories:
                item_subcategory_code = get_chosen_category_code(item_subcategory_name, list_subcategories)
                list_subcategories_names = [subcategory[0].lower() for subcategory in list_subcategories]
                if item_subcategory_name.lower() in list_subcategories_names:
                    if await check_on_items_limits_in_subcategory(message, item_category_code, item_subcategory_code):
                        await message.answer(f'üü¢ –í—ã –≤—ã–±—Ä–∞–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é: '
                                             f'<b>{item_subcategory_name}</b>. '
                                             f'–ö–æ–¥ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <i>{item_subcategory_code}</i>. –í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.\n\n'
                                             f'<b>–®–ê–ì_4:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:',
                                             reply_markup=cancel_markup())
                        await state.update_data(item_subcategory_name=item_subcategory_name,
                                                item_subcategory_code=item_subcategory_code,
                                                list_subcategories=list_subcategories)
                        await AddItem.next()
                    else:
                        await message.answer(f'üî¥ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - 98. –ë–æ–ª—å—à–µ '
                                             f'—Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–ª—å–∑—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ '
                                             f'–Ω–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é /admins_menu')
                        await state.finish()
                else:
                    if item_subcategory_name.lower() == '–±–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
                        await message.answer(f'üî¥ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π, –ø–æ—ç—Ç–æ–º—É –Ω–µ–ª—å–∑—è '
                                             f'–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –±–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é'
                                             f'–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:',
                                             reply_markup=choose_item_subcategory_name_markup(list_subcategories))
                    else:
                        if await check_on_subcategories_limits(message, item_category_code):
                            try:
                                item_subcategory_code = choose_subcategory_code_number(list_subcategories,
                                                                                       item_category_code)
                            except ExceededMaxProductSubCategoryQuantity as err:
                                await message.answer('üî¥' + ' ' + err.args[0], reply_markup=ReplyKeyboardRemove())
                                await state.finish()
                            else:
                                await message.answer(f'üü¢ –í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é: '
                                                     f'<b>{item_subcategory_name}</b>. '
                                                     f'–ù–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω –∫–æ–¥ {item_subcategory_code}. '
                                                     f'–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.\n\n'
                                                     f'<b>–®–ê–ì_4:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:',
                                                     reply_markup=cancel_markup())
                                await state.update_data(item_subcategory_name=item_subcategory_name,
                                                        item_subcategory_code=item_subcategory_code,
                                                        list_subcategories=list_subcategories)
                                await AddItem.next()
                        else:
                            await message.answer(f'üî¥ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - 98. '
                                                 f'–ë–æ–ª—å—à–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–µ–ª—å–∑—è')
                            await state.finish()
            else:
                if item_subcategory_name == "–ë–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
                    await message.answer('üü¢ –í–∞—à –æ—Ç–≤–µ—Ç - "–ë–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏" - –ø—Ä–∏–Ω—è—Ç.\n\n'
                                         '<b>–®–ê–ì_4:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:',
                                         reply_markup=cancel_markup())
                    await AddItem.next()
                else:
                    item_subcategory_code = choose_subcategory_code_number(list_subcategories, item_category_code)
                    await message.answer(f'üü¢ –í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é: <b>{item_subcategory_name}</b>. '
                                         f'–ù–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω –∫–æ–¥ {item_subcategory_code}. –í–∞—à –æ—Ç–≤–µ—Ç '
                                         f'–ø—Ä–∏–Ω—è—Ç.\n\n'
                                         f'<b>–®–ê–ì_4:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:',
                                         reply_markup=cancel_markup())
                    await state.update_data(item_subcategory_name=item_subcategory_name,
                                            item_subcategory_code=item_subcategory_code)
                    await AddItem.next()
        else:
            if list_subcategories:
                text = f'üî¥ –í—ã –≤–≤–µ–ª–∏: {message.text} –∏ –≤ –Ω–µ–º {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, ' \
                       f'–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –Ω–µ –±–æ–ª–µ–µ, —á–µ–º 30-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é ' \
                       f'–∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ:'
                await message.answer(text, reply_markup=choose_item_subcategory_name_markup(list_subcategories))
            else:
                text = f'üî¥ –í—ã –≤–≤–µ–ª–∏: {message.text} –∏ –≤ –Ω–µ–º {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, ' \
                       f'–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –Ω–µ –±–æ–ª–µ–µ, —á–µ–º 30-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤:'
                await message.answer(text, reply_markup=choose_item_subcategory_name_markup(list_subcategories))
    else:
        if list_subcategories:
            additional_text = f'üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –Ω–µ –±–æ–ª–µ–µ, ' \
                              f'—á–µ–º 30-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ:'
            await reject_content_type(message, additional_text, choose_item_subcategory_name_markup(list_subcategories))
        else:
            additional_text = f'üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –Ω–µ –±–æ–ª–µ–µ, ' \
                              f'—á–µ–º 30-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤:'
            await reject_content_type(message, additional_text, choose_item_subcategory_name_markup(list_subcategories))


async def choose_item_name(message: Message, state: FSMContext):
    if message.content_type == ContentType.TEXT:
        pattern = ItemPatterns.ITEM_NAME
        if pattern.match(message.text):
            item_name = message.text
            db = get_db(message)
            list_items_names = [item_name_record.get('item_name').lower() for item_name_record in
                                await db.get_items_names_from_items()]
            if item_name.lower() in list_items_names:
                await message.answer(f'üî¥ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <b>{item_name}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, '
                                     f'–æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç —É–∂–µ –∏–º–µ—é—â–∏—Ö—Å—è',
                                     reply_markup=cancel_markup())
            else:
                await state.update_data(item_name=item_name)
                await message.answer(f'üü¢ –í—ã –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <b>{item_name}</b>. –í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.\n\n'
                                     f'<b>–®–ê–ì_5:</b> –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞. –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏—Å–ª–∞–Ω—ã '
                                     f'–∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏–ª–∏ –≥—Ä—É–ø–ø–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', reply_markup=cancel_markup())
                await state.update_data(item_name=item_name)
                await AddItem.next()
        else:
            text = f'üî¥ –í—ã –≤–≤–µ–ª–∏: {message.text} –∏ –≤ –Ω–µ–º {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, ' \
                   f'–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –Ω–µ –±–æ–ª–µ–µ, —á–µ–º 30-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤'
            await message.answer(text, reply_markup=cancel_markup())
    else:
        additional_text = 'üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –Ω–µ –±–æ–ª–µ–µ, —á–µ–º 30-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤'
        await reject_content_type(message, additional_text, cancel_markup())


@album_latency(latency=1)
async def load_photos(message: Message, state: FSMContext, album: typing.List[types.Message]):
    not_a_photo_numbers = list()
    list_photos = list()
    for index, message in enumerate(album, start=1):
        if message.content_type != ContentType.PHOTO:
            not_a_photo_numbers.append(index)
        else:
            list_photos.append(message.photo[-1].file_id)
    if not_a_photo_numbers:
        await message.answer(f'üî¥ –ü–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏:\n'
                             f'{", ".join(map(str, not_a_photo_numbers))}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –Ω–æ —Ç–æ–ª—å–∫–æ —Å '
                             f'—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ –Ω–µ –±–æ–ª–µ–µ 10 —à—Ç.', reply_markup=cancel_markup())
    else:
        await message.answer(f'üü¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ: {len(list_photos)}.\n–í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ '
                             f'–∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.\n\n'
                             f'<b>–®–ê–ì_6:</b> –ü—Ä–∏—à–ª–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö. –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–µ–∑ –∫–æ–ø–µ–µ–∫',
                             reply_markup=cancel_markup())
        await state.update_data(item_photos=list_photos)
        await AddItem.next()


async def load_photo(message: Message, state: FSMContext):
    if message.content_type == ContentType.PHOTO:
        photo = message.photo[-1].file_id
        item_photos = [photo]
        await message.answer(f'üü¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ: 1. –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.\n\n'
                             f'<b>–®–ê–ì_6:</b> –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö. –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–µ–∑ –∫–æ–ø–µ–µ–∫',
                             reply_markup=cancel_markup())
        await state.update_data(item_photos=item_photos)
        await AddItem.next()
    else:
        additional_text = 'üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ 10 —à—Ç.'
        await reject_content_type(message, additional_text, cancel_markup())


async def set_item_price(message: Message, state: FSMContext):
    if message.content_type == ContentType.TEXT:
        pattern = ItemPatterns.ITEM_PRICE
        if pattern.match(message.text):
            item_price = int(message.text)
            await message.answer(f'üü¢ –í—ã —É–∫–∞–∑–∞–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <b>{item_price} —Ä—É–±.</b> '
                                 f'–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.\n\n'
                                 f'<b>–®–ê–ì_7:</b> –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–Ω–µ –±–æ–ª–µ–µ 800 —Å–∏–º–≤–æ–ª–æ–≤):',
                                 reply_markup=cancel_markup())
            await state.update_data(item_price=item_price)
            await AddItem.next()
        else:
            await message.answer(f'üî¥ –í—ã –≤–≤–µ–ª–∏ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞: {message.text}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 1000000',
                                 reply_markup=cancel_markup())
    else:
        additional_text = 'üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 1000000'
        await reject_content_type(message, additional_text, cancel_markup())


async def set_item_description(message: Message, state: FSMContext):
    if message.content_type == ContentType.TEXT:
        pattern = ItemPatterns.ITEM_DESCRIPTION
        if pattern.match(message.text):
            item_description = message.text
            await message.answer(f'üü¢ –í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n<i>{item_description}</i>\n'
                                 f'–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.\n\n'
                                 f'<b>–®–ê–ì_8:</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –æ–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è:',
                                 reply_markup=item_short_description_markup())
            await state.update_data(item_description=item_description)
            await AddItem.next()
        else:
            await message.answer(f'üî¥ –í –≤–∞—à–µ–º –æ–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–º–µ–Ω—å—à–∏—Ç–µ, '
                                 f'—á—Ç–æ–±—ã –±—ã–ª–æ –Ω–µ –±–æ–ª–µ–µ 800',
                                 reply_markup=cancel_markup())
    else:
        additional_text = 'üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π –¥–æ 800 —Å–∏–º–≤–æ–ª–æ–≤'
        await reject_content_type(message, additional_text, cancel_markup())


async def set_item_short_description(message: Message, state: FSMContext):
    if message.content_type == ContentType.TEXT:
        pattern = ItemPatterns.ITEM_SHORT_DESCRIPTION
        if pattern.match(message.text):
            item_short_description = message.text
            if item_short_description.lower() == '–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è':
                await message.answer(f'üü¢ –í—ã —É–∫–∞–∑–∞–ª–∏, —á—Ç–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.\n\n'
                                     f'<b>–®–ê–ì_9:</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫ –ø–æ–∫—É–ø–∫–µ:',
                                     reply_markup=cancel_markup())
                await AddItem.next()
            else:
                await message.answer(f'üü¢ –í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n'
                                     f'<i>{item_short_description}</i>\n–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.\n\n'
                                     f'<b>–®–ê–ì_9:</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫ –ø–æ–∫—É–ø–∫–µ:',
                                     reply_markup=cancel_markup())
                await state.update_data(item_short_description=item_short_description)
                await AddItem.next()
        else:
            await message.answer(f'üî¥ –í –≤–∞—à–µ–º –∫–æ—Ä–æ—Ç–∫–æ–º –æ–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                                 f'—É–º–µ–Ω—å—à–∏—Ç–µ, —á—Ç–æ–±—ã –±—ã–ª–æ –Ω–µ –±–æ–ª–µ–µ 50 –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"',
                                 reply_markup=item_short_description_markup())
    else:
        additional_text = 'üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"'
        await reject_content_type(message, additional_text, item_short_description_markup())


async def set_item_quantity(message: Message, state: FSMContext):
    if message.content_type == ContentType.TEXT:
        pattern = ItemPatterns.ITEM_TOTAL_QUANTITY
        if pattern.match(message.text):
            item_total_quantity = int(message.text)
            await message.answer(f'üü¢ –í—ã —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: <b>{item_total_quantity}</b> '
                                 f'–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.\n\n'
                                 f'<b>–®–ê–ì_10:</b> –í–≤–µ–¥–∏—Ç–µ, –±—É–¥–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä –≤–∏–¥–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é:',
                                 reply_markup=yes_no_reply_markup())
            await state.update_data(item_total_quantity=item_total_quantity)
            await AddItem.next()
        else:
            await message.answer(f'üî¥ –í—ã —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: {message.text}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 '
                                 f'–¥–æ 9999',
                                 reply_markup=cancel_markup())
    else:
        additional_text = 'üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9999'
        await reject_content_type(message, additional_text, cancel_markup())


async def choose_item_discontinued(message: Message, state: FSMContext):
    if message.content_type == ContentType.TEXT:
        if message.text.lower() in ['–¥–∞', '–Ω–µ—Ç']:
            if message.text.lower() == '–¥–∞':
                item_discontinued = False
                await message.answer('üü¢ –í—ã —É–∫–∞–∑–∞–ª–∏, —á—Ç–æ —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç —Å—Ä–∞–∑—É –≤–∏–¥–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é. –í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.\n\n'
                                     '<b>–®–ê–ì_11:</b> –ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±—ã—Å—Ç—Ä–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏ '
                                     '–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤. –õ–∏–±–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é '
                                     '–Ω–∞ –≤–∞—à–µ–º —Å–∞–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .jpg –∏–ª–∏ .jpeg, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è –Ω–∞ "http://" –∏–ª–∏ '
                                     '"https://" –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â—É—é—Å—è –Ω–∞ ".jpeg" –∏–ª–∏ ".jpg"',
                                     reply_markup=cancel_markup())
                await state.update_data(item_discontinued=item_discontinued)
                await AddItem.next()
            else:
                item_discontinued = True
                await message.answer('üü¢ –í—ã —É–∫–∞–∑–∞–ª–∏, —á—Ç–æ —Ç–æ–≤–∞—Ä –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é. –í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.\n\n'
                                     '<b>–®–ê–ì_11:</b> –ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±—ã—Å—Ç—Ä–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏ '
                                     '–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤. –õ–∏–±–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é '
                                     '–Ω–∞ –≤–∞—à–µ–º —Å–∞–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .jpg –∏–ª–∏ .jpeg, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è –Ω–∞ "http://" –∏–ª–∏ '
                                     '"https://" –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â—É—é—Å—è –Ω–∞ ".jpeg" –∏–ª–∏ ".jpg"',
                                     reply_markup=cancel_markup())
                await state.update_data(item_discontinued=item_discontinued)
                await AddItem.next()
        else:
            await message.answer('üî¥ –ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç "–î–∞" –ª–∏–±–æ "–ù–µ—Ç" –ª–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:',
                                 reply_markup=yes_no_reply_markup())
    else:
        additional_text = 'üî¥ –ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç "–î–∞" –ª–∏–±–æ "–ù–µ—Ç" –ª–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:'
        await reject_content_type(message, additional_text, yes_no_reply_markup())


@album_latency(latency=1)
async def refuse_item_photos_for_url(message: Message):
    await message.answer('üî¥ –ú–µ–¥–∏–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç '
                         '–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±—ã—Å—Ç—Ä–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤. –õ–∏–±–æ –ø—Ä–∏—à–ª–∏—Ç–µ '
                         '—Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞ –≤–∞—à–µ–º —Å–∞–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .jpg –∏–ª–∏ .jpeg, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è –Ω–∞ '
                         '"http://" –∏–ª–∏ "https://" –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â—É—é—Å—è –Ω–∞ ".jpeg" –∏–ª–∏ ".jpg"',
                         reply_markup=cancel_markup())


async def set_item_photo_url(message: Message, state: FSMContext, file_uploader: TelegraphService):
    if message.content_type == ContentType.TEXT:
        pattern = ItemPatterns.ITEM_PHOTO_URL
        if pattern.match(message.text.lower()):
            item_photo_url = message.text
            await message.answer(f'üü¢ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:\n\n{item_photo_url}\n\n–ø—Ä–∏–Ω—è—Ç–∞. '
                                 f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.')
            await state.update_data(item_photo_url=item_photo_url)
            await load_to_database_from_state(message, state)
        else:
            await message.answer(f'üî¥ –í—ã –ø—Ä–∏—Å–ª–∞–ª–∏: {message.text}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç '
                                 f'–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±—ã—Å—Ç—Ä–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤. –õ–∏–±–æ '
                                 f'–ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞ –≤–∞—à–µ–º —Å–∞–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .jpg –∏–ª–∏ .jpeg, '
                                 f'–Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è –Ω–∞ "http://" –∏–ª–∏ "https://" –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â—É—é—Å—è –Ω–∞ ".jpeg" –∏–ª–∏ ".jpg"',
                                 reply_markup=cancel_markup())
    elif message.content_type == ContentType.PHOTO:
        await message.bot.send_chat_action(message.chat.id, types.ChatActions.UPLOAD_PHOTO)
        err_text = "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Telegraph. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–ª—å–∑—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ. "\
                   "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–∞ —É –≤–∞—Å –µ—Å—Ç—å. " \
                   '–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞", —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∑–¥–Ω–µ–µ'
        # item_photo_url = await get_photo_link(message)
        uploaded_photo = await on_process_upload_photo(message, logger, state, err_text, file_uploader, cancel_markup())
        if uploaded_photo:
            item_photo_url = uploaded_photo.link
            await message.answer(f'üü¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:\n\n'
                                 f'{item_photo_url}')
            await state.update_data(item_photo_url=item_photo_url)
            await load_to_database_from_state(message, state)
    else:
        additional_text = f'üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ ' \
                          f'–≤ –±—ã—Å—Ç—Ä–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤. –õ–∏–±–æ –ø—Ä–∏—à–ª–∏—Ç–µ ' \
                          f'—Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞ –≤–∞—à–µ–º —Å–∞–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .jpg –∏–ª–∏ .jpeg, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è –Ω–∞ ' \
                          f'"http://" –∏–ª–∏ "https://" –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â—É—é—Å—è –Ω–∞ ".jpeg" –∏–ª–∏ ".jpg"'
        await reject_content_type(message, additional_text, cancel_markup())


async def load_to_database_from_state(message: Message, state: FSMContext):
    state_data_names = ['item_id', 'item_category_name', 'item_category_code', 'item_subcategory_name',
                        'item_subcategory_code', 'item_name', 'item_photos', 'item_price', 'item_description',
                        'item_short_description', 'item_total_quantity', 'item_discontinued', 'item_photo_url']
    state_data = await get_data_from_state(state, *state_data_names)
    db = get_db(message)
    try:
        item_record = await db.load_item_to_items(*state_data)
    except UniqueViolationError as err:
        key, value = parse_unique_violation_error(err.as_dict().get("detail"))
        text = 'üî¥' + ' ' + text_for_unique_violation_error(key, value)
        await message.answer(text, reply_markup=admins_menu_markup())
        await state.finish()
        await AdminActions.add_or_change.set()
    else:
        item = get_item_data(item_record)
        await state.finish()
        text = 'üü¢ –°–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:\n\n' + full_gproduct_description(item)
        await message.answer(text, reply_markup=ReplyKeyboardRemove())


def parse_unique_violation_error(detail: str) -> typing.Tuple[str, str]:
    key, value = [_.strip('()') for _ in detail.split(' ')[1].strip('"').split('=')]
    return key, value


def text_for_unique_violation_error(key: str, value: str):
    if key == 'item_id':
        item_id = int(value)
        text = f'–¢–æ–≤–∞—Ä —Å <b>"ID {item_id}"</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º <b>"ID"</b>'
        return text
    elif key == 'item_name':
        item_name = value
        text = f'–¢–æ–≤–∞—Ä —Å <b>–ù–∞–∑–≤–∞–Ω–∏–µ–º: "{item_name}"</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º'
        return text


def register_admin_add_item(dp: Dispatcher):
    dp.register_message_handler(choose_item_id, state=AddItem.item_id, **admin_filters)
    dp.register_message_handler(choose_item_category_name, state=AddItem.item_category_name, **admin_filters)
    dp.register_message_handler(choose_item_subcategory_name, state=AddItem.item_subcategory_name, **admin_filters)
    dp.register_message_handler(choose_item_name, state=AddItem.item_name, **admin_filters)
    dp.register_message_handler(load_photos, is_media_group=True, state=AddItem.item_photos, **admin_filters)
    dp.register_message_handler(load_photo, state=AddItem.item_photos, **admin_filters)
    dp.register_message_handler(set_item_price, state=AddItem.item_price, **admin_filters)
    dp.register_message_handler(set_item_description, state=AddItem.item_description, **admin_filters)
    dp.register_message_handler(set_item_short_description, state=AddItem.item_short_description, **admin_filters)
    dp.register_message_handler(set_item_quantity, state=AddItem.item_total_quantity, **admin_filters)
    dp.register_message_handler(choose_item_discontinued, state=AddItem.item_discontinued, **admin_filters)
    dp.register_message_handler(refuse_item_photos_for_url, is_media_group=True, state=AddItem.item_photo_url,
                                **admin_filters)
    dp.register_message_handler(set_item_photo_url, state=AddItem.item_photo_url, **admin_filters)
