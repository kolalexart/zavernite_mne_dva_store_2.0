import typing

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, ReplyKeyboardMarkup

from tgbot.handlers.admins.admins_secondary import is_requerid_format_item_category, admin_filters, \
    get_data_from_state, is_requerid_format_yes_or_no_markup, is_requerid_format_item_category_while_renaiming, \
    get_name_and_code, get_items_subcategories, check_on_without_subcategory
from tgbot.keyboards.menu_keyboards.admins_keybords.admins_menu import yes_no_reply_markup, \
    choose_item_category_name_markup, cancel_markup, choose_item_subcategory_name_markup
from tgbot.misc.secondary_functions import get_db, ItemPatterns
from tgbot.misc.states import DeleteItemCategory, ChangeItemCategoryName, ChangeItemSubCategoryName, \
    DeleteItemSubCategory


async def create_success_message(state: FSMContext, item_category_name: str,
                                 item_subcategory_name: typing.Optional[str] = None):
    state = await state.get_state()
    if not item_subcategory_name:
        if state == DeleteItemCategory.item_category_name.state:
            success_message = f'‚ùó‚ùó‚ùó –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ <b>"{item_category_name}"</b>. –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ ' \
                              f'–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –Ω–µ–π. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. ' \
                              f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>"{item_category_name}"</b>?'
            return success_message
        elif state == ChangeItemCategoryName.item_category_name.state:
            success_message = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ <b>"{item_category_name}"</b>. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ' \
                              f'–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤. –õ–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:'
            return success_message
        elif state == DeleteItemSubCategory.item_category_name.state:
            success_message = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ <b>"{item_category_name}"</b>. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, ' \
                              f'–∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å. –õ–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:'
            return success_message
        elif state == ChangeItemSubCategoryName.item_category_name.state:
            success_message = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ <b>"{item_category_name}"</b>. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, ' \
                              f'—É –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ. –õ–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:'
            return success_message
    else:
        if state == DeleteItemSubCategory.item_subcategory_name.state:
            success_message = f'‚ùó‚ùó‚ùó –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ <b>"{item_subcategory_name}"</b> –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ' \
                              f'<b>"{item_category_name}"</b>. –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ ' \
                              f'–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –Ω–µ–π. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. ' \
                              f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ' \
                              f'<b>"{item_subcategory_name}"</b> –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>"{item_category_name}"</b>?'
            return success_message
        elif state == ChangeItemSubCategoryName.item_subcategory_name.state:
            success_message = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ <b>"{item_subcategory_name}"</b> ' \
                              f'–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>"{item_category_name}"</b>. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ ' \
                              f'–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤. –õ–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:'
            return success_message


async def choose_item_category_name(message: Message, state: FSMContext, success_states_group,
                                    markup: typing.Optional[ReplyKeyboardMarkup] = None, for_subcategory: bool = False):

    list_categories = (await get_data_from_state(state, 'list_categories'))[0]
    if is_requerid_format_item_category(message, list_categories):
        item_category_name, item_category_code = get_name_and_code(message, list_categories)

        if for_subcategory:
            list_subcategories = await get_items_subcategories(message, item_category_code)
            if list_subcategories and check_on_without_subcategory(list_subcategories):
                await message.answer(f'–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>"{item_category_name}"</b> –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π. –í—ã –º–æ–∂–µ—Ç–µ '
                                     f'—É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é '
                                     f'–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ /admins_menu', reply_markup=ReplyKeyboardRemove())
                await state.finish()
            else:
                success_message = await create_success_message(state, item_category_name)
                markup = choose_item_subcategory_name_markup(list_subcategories)
                await state.update_data(item_category_name=item_category_name,
                                        item_category_code=item_category_code,
                                        list_subcategories=list_subcategories)
                await message.answer(success_message, reply_markup=markup)
                await success_states_group.next()

        else:
            success_message = await create_success_message(state, item_category_name)
            await state.update_data(item_category_name=item_category_name,
                                    item_category_code=item_category_code)
            await message.answer(success_message, reply_markup=markup)
            await success_states_group.next()
    else:
        list_categories = (await get_data_from_state(state, 'list_categories'))[0]
        await message.answer('üî¥ –¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö '
                             '–Ω–∏–∂–µ –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:',
                             reply_markup=choose_item_category_name_markup(list_categories))


async def choose_item_category_name_for_deleting(message: Message, state: FSMContext):
    await choose_item_category_name(message, state, DeleteItemCategory, yes_no_reply_markup())
    # if await is_requerid_format_item_category(message, state):
    #     item_category_name = message.text.capitalize()
    #     await state.update_data(item_category_name=item_category_name)
    #     await message.answer(f'‚ùó‚ùó‚ùó –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ <b>{item_category_name}</b>. –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è '
    #                          f'—Ç–æ–≤–∞—Ä–æ–≤ –∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –Ω–µ–π. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ '
    #                          f'—Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{item_category_name}</b>?',
    #                          reply_markup=yes_no_reply_markup())
    #     await DeleteItemCategory.next()
    # else:
    #     list_categories = (await get_data_from_state(state, 'list_categories'))[0]
    #     await message.answer('üî¥ –¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö '
    #                          '–Ω–∏–∂–µ –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:',
    #                          reply_markup=choose_item_category_name_markup(list_categories))


async def confirm_deleting_item_category(message: Message, state: FSMContext):
    if is_requerid_format_yes_or_no_markup(message):
        db = get_db(message)
        item_category_name = (await get_data_from_state(state, 'item_category_name'))[0]
        confirmation = message.text.lower()
        if confirmation == '–¥–∞':
            quantity_deleted_items = await db.delete_items_from_items(item_category_name=item_category_name)
            await message.answer(f'üü¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤ <b>"{item_category_name}"</b> –∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –Ω–µ–µ '
                                 f'—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '
                                 f'<b>"{item_category_name}"</b>: {quantity_deleted_items}',
                                 reply_markup=ReplyKeyboardRemove())
            await state.finish()
        if confirmation == '–Ω–µ—Ç':
            await message.answer(f'üü¢ –£–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ <b>"{item_category_name}"</b> —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ ',
                                 reply_markup=ReplyKeyboardRemove())
            await state.finish()
    else:
        text = 'üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ "–î–∞", "–ù–µ—Ç" –ª–∏–±–æ "–û—Ç–º–µ–Ω–∞"'
        await message.answer(text, reply_markup=yes_no_reply_markup())


async def choose_item_category_name_for_renaiming(message: Message, state: FSMContext):
    await choose_item_category_name(message, state, ChangeItemCategoryName, cancel_markup())


async def set_new_item_category_name(message: Message, state: FSMContext):
    list_categories, item_category_name = await get_data_from_state(state, 'list_categories', 'item_category_name')
    if await is_requerid_format_item_category_while_renaiming(message, list_categories,
                                                              ItemPatterns.ITEM_CATEGORY_NAME):
        db = get_db(message)
        new_item_category_name = message.text
        quantity_updated_items = await db.update_items_from_items('item_category_name', new_item_category_name,
                                                                  item_category_name=item_category_name)
        await message.answer(f'üü¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ <b>"{item_category_name}"</b> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '
                             f'<b>"{new_item_category_name}"</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: '
                             f'{quantity_updated_items}', reply_markup=ReplyKeyboardRemove())
        await state.finish()
    else:
        text = f'üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤, —Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ –Ω–µ –±–æ–ª–µ–µ, —á–µ–º 30-—Ç–∏ ' \
               f'—Å–∏–º–≤–æ–ª–æ–≤, –∏ –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç —É–∂–µ –∏–º–µ—é—â–∏—Ö—Å—è –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:'
        await message.answer(text, reply_markup=cancel_markup())


async def choose_item_category_name_for_deleting_subcategory(message: Message, state: FSMContext):
    await choose_item_category_name(message, state, DeleteItemSubCategory, for_subcategory=True)


async def choose_item_subcategory_name(message: Message, state: FSMContext, success_states_group,
                                       markup):
    item_category_name, item_category_code, list_subcategories = \
        await get_data_from_state(state, 'item_category_name', 'item_category_code', 'list_subcategories')
    if is_requerid_format_item_category(message, list_subcategories):
        item_subcategory_name, item_subcategory_code = get_name_and_code(message, list_subcategories)
        success_message = await create_success_message(state, item_category_name, item_subcategory_name)
        await state.update_data(item_subcategory_name=item_subcategory_name,
                                item_subcategory_code=item_subcategory_code)
        await message.answer(success_message, reply_markup=markup)
        await success_states_group.next()
    else:
        await message.answer('üî¥ –¢–∞–∫–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ '
                             '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:',
                             reply_markup=choose_item_subcategory_name_markup(list_subcategories))


async def choose_item_subcategory_name_for_deleting_subcategory(message: Message, state: FSMContext):
    await choose_item_subcategory_name(message, state, DeleteItemSubCategory, yes_no_reply_markup())
    # item_category_name, item_category_code, list_subcategories = \
    #     await get_data_from_state(state, 'item_category_name', 'item_category_code', 'list_subcategories')
    # if is_requerid_format_item_category(message, list_subcategories):
    #     item_subcategory_name, item_subcategory_code = get_name_and_code(message, list_subcategories)
    #     success_message = await create_success_message(state, item_category_name, item_subcategory_name)
    #     await state.update_data(item_subcategory_name=item_subcategory_name,
    #                             item_subcategory_code=item_subcategory_code)
    #     await message.answer(success_message, reply_markup=yes_no_reply_markup())
    #     await DeleteItemSubCategory.next()
    # else:
    #     await message.answer('üî¥ –¢–∞–∫–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ '
    #                          '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:',
    #                          reply_markup=choose_item_subcategory_name_markup(list_subcategories))


async def confirm_deleting_item_subcategory(message: Message, state: FSMContext):
    if is_requerid_format_yes_or_no_markup(message):
        db = get_db(message)
        item_subcategory_name, item_category_name = await get_data_from_state(state, 'item_subcategory_name',
                                                                              'item_category_name')
        confirmation = message.text.lower()
        if confirmation == '–¥–∞':
            quantity_deleted_items = await db.delete_items_from_items(item_category_name=item_category_name,
                                                                      item_subcategory_name=item_subcategory_name)
            await message.answer(f'üü¢ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤ <b>"{item_subcategory_name}"</b> –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '
                                 f'<b>"{item_category_name}"</b> –∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –Ω–µ–µ '
                                 f'—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '
                                 f'<b>"{item_category_name}"</b> –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>"{item_category_name}"</b>: '
                                 f'{quantity_deleted_items}', reply_markup=ReplyKeyboardRemove())
            await state.finish()
        if confirmation == '–Ω–µ—Ç':
            await message.answer(f'üü¢ –£–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ <b>"{item_subcategory_name}"</b> –≤ '
                                 f'–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>"{item_category_name}"</b> —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ ',
                                 reply_markup=ReplyKeyboardRemove())
            await state.finish()
    else:
        text = 'üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ "–î–∞", "–ù–µ—Ç" –ª–∏–±–æ "–û—Ç–º–µ–Ω–∞"'
        await message.answer(text, reply_markup=yes_no_reply_markup())


async def choose_item_category_name_for_renaiming_subcategory(message: Message, state: FSMContext):
    await choose_item_category_name(message, state, ChangeItemSubCategoryName, for_subcategory=True)


async def choose_item_subcategory_name_for_renaiming_subcategory(message: Message, state: FSMContext):
    await choose_item_subcategory_name(message, state, ChangeItemSubCategoryName, cancel_markup())


async def set_new_item_subcategory_name(message: Message, state: FSMContext):
    list_subcategories, item_subcategory_name, item_category_name = \
        await get_data_from_state(state, 'list_subcategories', 'item_subcategory_name', 'item_category_name')
    if await is_requerid_format_item_category_while_renaiming(message, list_subcategories,
                                                              ItemPatterns.ITEM_SUBCATEGORY_NAME):
        db = get_db(message)
        new_item_subcategory_name = message.text
        quantity_updated_items = await db.update_items_from_items('item_subcategory_name', new_item_subcategory_name,
                                                                  item_category_name=item_category_name,
                                                                  item_subcategory_name=item_subcategory_name)
        await message.answer(f'üü¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ <b>"{item_subcategory_name}"</b> –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏ '
                             f'<b>"{item_category_name}"</b> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '
                             f'<b>"{new_item_subcategory_name}"</b>\n'
                             f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: {quantity_updated_items}',
                             reply_markup=ReplyKeyboardRemove())
        await state.finish()
    else:
        text = f'üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤, —Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ –Ω–µ –±–æ–ª–µ–µ, —á–µ–º 30-—Ç–∏ ' \
               f'—Å–∏–º–≤–æ–ª–æ–≤, –∏ –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç —É–∂–µ –∏–º–µ—é—â–∏—Ö—Å—è –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:'
        await message.answer(text, reply_markup=cancel_markup())


def register_admin_change_or_delete_item_category(dp: Dispatcher):
    dp.register_message_handler(choose_item_category_name_for_deleting, state=DeleteItemCategory.item_category_name,
                                **admin_filters)
    dp.register_message_handler(confirm_deleting_item_category, state=DeleteItemCategory.confirm,
                                **admin_filters)
    dp.register_message_handler(choose_item_category_name_for_renaiming,
                                state=ChangeItemCategoryName.item_category_name, **admin_filters)
    dp.register_message_handler(set_new_item_category_name, state=ChangeItemCategoryName.new_item_category_name,
                                **admin_filters)
    dp.register_message_handler(choose_item_category_name_for_deleting_subcategory,
                                state=DeleteItemSubCategory.item_category_name, **admin_filters)
    dp.register_message_handler(choose_item_subcategory_name_for_deleting_subcategory,
                                state=DeleteItemSubCategory.item_subcategory_name, **admin_filters)
    dp.register_message_handler(confirm_deleting_item_subcategory,
                                state=DeleteItemSubCategory.confirm, **admin_filters)
    dp.register_message_handler(choose_item_category_name_for_renaiming_subcategory,
                                state=ChangeItemSubCategoryName.item_category_name, **admin_filters)
    dp.register_message_handler(choose_item_subcategory_name_for_renaiming_subcategory,
                                state=ChangeItemSubCategoryName.item_subcategory_name, **admin_filters)
    dp.register_message_handler(set_new_item_subcategory_name,
                                state=ChangeItemSubCategoryName.new_item_subcategory_name, **admin_filters)
